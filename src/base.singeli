# Base definitions that determine how "our version" of Singeli works

# Mostly it looks like C
include 'arch/c'    # Backend
include 'skin/c'    # Operators
include 'skin/cext'

include 'util/tup'  # List utilities: scan and so on
include 'util/kind' # Kind-test functions like ktup

oper <~> swap        infix none  20
oper <-> swap_ptr    infix none  20
oper >*  ptr_gt      infix none  20
oper *?  lazy_load   prefix      60
oper *?  lazy_load   infix right 50
oper *+  pnt_each    prefix      60
oper >   single      prefix      80

def tptr{T} = 'pointer'===typekind{T}

def single = match { {{x,..._}}=>x; {x}=>x }

def can_use_unstable{x} = (not ktup{x}) or 1 == length{x}

def swap{a, b} = { t:=a; a=b; b=t }
def swap_ptr{a:T, b:T if tptr{T}} = { t := *a; a <- *b; b <- t }

def __pnt{{f,...r}} = __pnt{f}
def ptr_gt{a,b} = load{a,0} > load{b,0}
def ptr_lt{a,b} = load{a,0} < load{b,0}

def usize = primtype{'u',width{*void}}
def U = usize
def bytes{t if ktyp{t}} = width{t} / 8

# Change to unsigned: here we always subtract smaller from greater
def __sub{a:P,b:P if tptr{P}}  = emit{usize, 'op -', a, b}

def addtype{a:T} = if (tptr{T}) usize else T
def __add{a, b:u1} = __add{a, addtype{a}^~b}
def __sub{a, b:u1} = __sub{a, addtype{a}^~b}

def clone{old} = { new:=old }

def leading_zeros{x:u64} = u8 <~ emit{i32, '__builtin_clzll', x}

def expect{e}{X} = emit{type{X}, '__builtin_expect', X,e}
def RARE   = expect{0}
def LIKELY = expect{1}

# Pervasion
local include 'util/perv'
extend perv1{clone}
extend perv2{load}
extend (perv{3}){store}
extend perv2{__add}
extend perv2{__sub}
extend perv2{__or }
extend perv2{__shl}
extend perv2{__shr}
extend perv1{__decr}
def eachrec{f,...a} = { (extend (perv{length{a}}){f}){...a} }

local def extend ecmp{f,g} = {
  def f{{a,..._},{b,..._}} = f{a,b}
  def f{dn==0} = f
  def f{dn==1} = g
}
local def dn_ind = tup{0,1, 3,2, 5,4, 7,6}
extend ({...f}=>each{ecmp,f,select{f,dn_ind}}){
  __eq, __ne, __lt, __gt, __le, __ge,
  ptr_gt, ptr_lt
}

def pnt_each{...T} = eachrec{__pnt, ...T}

# ++{1} is -- and +={1} is -=
def __incr{dn==0} = __incr
def __incr{dn==1} = __decr

# -{1} swaps arguments
def __sub{dn==0} = __sub
def __sub{dn==1}{a,b} = b-a

def type{{s,..._}} = type{s}
def scaltype{T} = if (tptr{T}) scaltype{eltype{T}} else T
def scaltype{x if not ktyp{x}} = scaltype{type{x}}

def isid{ptr} = not tptr{type{ptr}}
def load{ptr, i if isid{ptr}} = ptr + i
def store{ptr=='sink', i, val} = val
def __add{ptr=='sink', i} = 'sink'

def lazy_load{p} = lazy_load{p,0}
def lazy_load{p,i} = {
  def s = load{single{p},single{i}}
  if (not ktup{p}) s; else {
    def ll{p,i}{} = load{p,i}
    def pr = slice{p,1}
    merge{
      tup{s},
      if (ktup{i}) each{ll, pr, slice{i,1}} else each{ll{.,i},pr}
    }
  }
}
def store{p, i, val if kgen{val}} = store{p, i, val{}}
def get{a} = a
def get{a if kgen{a}} = a{}
extend perv1{get}

def for{vars,begin,end,iter} = {
  def e = usize^~end
  i := usize^~begin
  while (i < e) {
    iter{i, vars}
    i += 1
  }
}
def for_backwards{vars,begin,end,iter} = {
  i := usize^~end
  def e = usize^~begin
  while (i > e) {
    i -= 1
    iter{i, vars}
  }
}
def for_const{vars,begin,end,iter} = {
  if (begin < end) {
    for_const{vars,begin, end-1, iter}
    iter{end-1, vars}
  }
}
def for_unroll{unr}{vars,begin,end,iter} = {
  def e = usize^~end
  i:usize = begin
  eu := e & ~ usize~~(unr-1)
  while (i < eu) {
    @for_const (j to unr) iter{i+j, vars}
    i += unr
  }
  while (i < e) {
    iter{i, vars}
    i += 1
  }
}
