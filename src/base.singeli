include 'arch/c'
include 'skin/c'

oper infix right -> load        50
oper infix right <- __store      5
oper infix right ~~ reinterpret 55
oper infix right ^~ promote     55
oper infix right <~ narrow      55

def __store{ind}{ptr, val} = store{ptr, ind, val}
def __store{ptr, val} = __store{0}{ptr, val}

def narrow{T, v} = emit{T, '', v}

def usize = primtype{'u',width{*void}}

# Change to unsigned: here we always subtract smaller from greater
def __sub{a:P,b:P & match{'pointer',typekind{P}}}  = emit{usize, 'op -', a, b}

def addtype{a:T} = T
def addtype{a:T & match{'pointer',typekind{T}}} = usize
def __add{a, b:u1} = __add{a, addtype{a}^~b}
def __sub{a, b:u1} = __sub{a, addtype{a}^~b}

def expect{e}{X} = emit{type{X}, '__builtin_expect', X,e}
def RARE   = expect{0}
def LIKELY = expect{1}

def for{vars,begin,end,block} = {
  def e = usize^~end
  i:usize = begin
  while (i<e) {
    exec{i, vars,block}
    i = i+1
  }
}
def for_const{vars,begin,end,block} = {
  if (0<end) {
    for_const{vars,begin,end-1,block}
    exec{end-1, vars,block}
  }
}
def for_unroll{unr}{vars,begin,end,block} = {
  def e = usize^~end
  i:usize = begin
  eu := e & ~cast{usize,unr-1}
  while (i<eu) {
    @for_const (j to unr) exec{i+j, vars,block}
    i += unr
  }
  while (i<e) {
    exec{i, vars,block}
    i += 1
  }
}

def print{x:T & match{'number',kind{T}}} = emit{void,'printf','"%d\n"',x}
def print{x:u64} = emit{void,'printf','"%ld\n"',x}
