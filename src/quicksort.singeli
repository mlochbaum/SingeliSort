include './partition'
include './median'
include './xorshift'
include './arith'  # Logs and square roots

def get_pivot{array:pT, n:U, getaux, sort} = {
  # log_2 of minimum size for sampling
  def sl0 = 14
  # Output array and index
  arr:=array; ind:U = 0
  if (n <= 256) {
    ind = locate_3_median{array, n}
  } else if (n <= 1024) {
    ind = locate_3of3_pseudomedian{array, n}
  } else if (n <= 1 << sl0) {
    ind = locate_5of3_pseudomedian{array, n}
  } else {
    aux := getaux{}
    # gap is the expected distance between adjacent samples
    # We'll get about n/gap samples
    log2:U = floor_log2{n, sl0}
    gap_min := 1 << (log2 / 2 + floor_log2{2 + sl0} >> 1)
    gap := sqrt_approx{2*n * (2+log2), gap_min}

    # Collect samples with split xorshift and add to aux
    aux1 := aux
    def add{ind} = { aux1 <- array->ind; ++aux1 }
    mask := gap_min - 1
    def add3 = make_split_xorshift{tup{13,17,5}, n, mask, add}

    i:U = 0; while (i < n - (mask + 2 * gap)) add3{i, gap}
    ns := aux1 - aux
    sort{aux, aux, aux1, ns}
    arr = aux
    ind = ns / 2
  }
  arr -> ind
}

# Quicksort loop with unstable partitioning
# Pointer layout credit to Scandum: https://github.com/scandum/fluxsort
# Sort src, placing the result in dst and using space from aux
# src may be equal to dst or aux
def flux_loop{recur, tailcall, piv:T, src:*T, dst:*T, aux:*T, n:U} = {

  # Partition: left side directly in dst with length l, includes pivots
  l := flux_partition{src, <=, piv, dst, aux, n}

  # Right-hand side
  # If pivot is the maximum value, everything ends in dst
  if (l == n) {
    # Partition again with pivots on the right
    # This bounds performance by O(k*n) for only k unique values
    l = flux_partition{dst, <, piv, dst, aux, n}
    set{dst+l, aux, n-l} # Should probably write a reverse partition to avoid this
  } else {
    # Otherwise, sort the right-hand side, moving it from aux to dst
    recur{aux, dst+l, aux, n-l}
  }

  # Left-hand side
  if (tailcall) { # Another call on the original arguments follows
    src = dst
    n = l
  } else {
    recur{dst, dst, aux, l}
  }
}

flux32loop(src:*i32, dst:*i32, aux:*i32, n:u64) : void = {
  while (u1~~1) {
    # Base case
    if (n < 32) {
      sort_lt32{dst, src, n}
      return{}
    }
    def recur = bind{call,flux32loop}
    def getaux{} = { a:=aux; if (a==src) a=dst; a }
    piv := get_pivot{src, n, getaux, recur}
    flux_loop{recur,1, piv, src,dst,aux,n}
  }
}
