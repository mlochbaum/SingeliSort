# Special arithmetic functions, implemented with loops

def floor_log2{n & knum{n}} = {
  if (n < 2) 0; else 1 + floor_log2{n / 2}
}
def floor_log2{n:T, min} = {
  l:T = min
  nt := n>>l; while (nt) { ++l; nt >>= 1 }
  l
}
def floor_log2{n:T} = floor_log2{n, 0}

def sqrt_approx{n:T, init} = {
  s:T = init
  @for_const (i to 5) s = (s + n/s) / 2
  s
}
