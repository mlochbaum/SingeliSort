# Sorting small arrays, less than 32 elements
# Follows quadsort: https://github.com/scandum/quadsort

# The general strategy is to sort an initial portion (at least half the
# array) with a power-of-two length using merge sort, then add the rest
# of the elements with insertion sort.
# These methods are mostly branchless, with some shortcuts that make
# them adapt slightly to already-sorted data

local include './network'

# Sort exactly 2 elements branchlessly
def sort_2{dn, dst, src} = {
  c := src >*{dn} src+1
  t := src->(~c)
  dst <-{0} src->c
  dst <-{1} t
  c
}
def sort_2{dn, ptr} = sort_2{dn, ptr, ptr}

# 0 to 3 elements, could be considered a bubble sort or insertion sort
def sort_lt4{dn, dst, src, n} = {
  def mov = not is{dst,src}
  if (n > 1) {
    sort_2{dn, dst, src}
    if (n > 2) {
      if (mov) dst <-{2} src->2
      sort_2{dn, dst+1}
      sort_2{dn, dst}
    }
  } else if (mov and n == 1) {
    dst <- src->0
  }
}

# The adaptive quad swap
def sort_4_quad{dn, dst, src} = {
  def s22{dst, src} = @for_const (i to 2) sort_2{dn, dst+2*i, src+2*i}
  s22{dst, src}
  if (sort_2{dn, dst+1}) {
    s22{dst, dst}
    sort_2{dn, dst+1}
  }
}

# Specialized parity merging for 8 or 16 elements
# Always use 2 rounds of merges to get from ptr to swap and back
def sort_8_16_parity{n, sort_q, merge_h}{dn, dst, src} = {
  def T = scaltype{dst}
  # n elements of swap space
  def swap = eachrec{{p:*T}=>{s:*T = copy{n,0}}, dst}

  # Sort groups of 2 or 4 elements
  def q = n/4
  @for_const (i to 4) sort_q{dn, dst + q*i, src + q*i}

  # Check to see if these groups need to be merged at all
  def chk{i} = dst+(i*q - 1) >*{dn} dst+(i*q)
  if (chk{1} or chk{2} or chk{3}) {
    # Two rounds of merging: dst to swap in two parts, then back
    def h = n/2
    @for_const (i to 2) parity_merge_const{dn, h, swap + h*i, dst + h*i}
    merge_h{dn, dst, swap}
  }
}
def sort_8_parity = sort_8_16_parity{
  8, sort_2,
  {dn,d,s}=>parity_merge_const{dn, 8, d, s}
}
def sort_16_parity = sort_8_16_parity{
  16, sort_4_quad,
  {dn,d,s}=>parity_merge_fn{dn, 0, d, s, 8, 16}
}

def sort_lt32{dn, dst, src, n:U, max} = {
  def un = can_use_unstable{src} and isint{scaltype{src}}
  def use{l, sort_un, sort_stable} = {
    (if (un) sort_un else sort_stable){dn, dst, src}
    def cpy{dst,src} = {
      if (isid{src} or (not dst===src and dst!=src)) {
        @for (dst,src over _ from l to n) dst=src
      }
    }
    eachrec{cpy, dst, src}
    insertion_finish{dn, dst, dst, l, n}
  }
  if      (max <=  4 or n <  4) sort_lt4{dn, dst, src, n}
  else if (max <=  8 or n <  8) use{ 4, network_sort_4,  sort_4_quad}
  else if (max <= 16 or n < 16) use{ 8, network_sort_8,  sort_8_parity}
  else                          use{16, network_sort_16, sort_16_parity}
}
def sort_lt32{dn, dst, src, n:U} = sort_lt32{dn, dst, src, n, 32}
def sort_lt32{dn, ptr, n:U, max if knum{max}} = sort_lt32{dn, ptr, ptr, n, max}
def sort_lt32{dn, ptr, n:U} = sort_lt32{dn, ptr, ptr, n}
