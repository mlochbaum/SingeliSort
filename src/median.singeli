local {

include './xorshift'

# Given a pointer and an odd-length tuple of indices, return the index
# of the median value without moving any values
def locate_median{src:pT, inds} = {
  def l = tuplen{inds}
  def k = l >> 1  # Median is greater than exactly k values

  # Count number of comparisons
  # Only l-1 counters: if median comes last it's found by elimination
  def sums = each{{_}=>{t:u8=0}, range{l-1}}

  def get{i} = src->tupsel{i, inds}
  def s{i} = tupsel{i, sums}

  @for_const (i from 0 to l-1) {
    vi := get{i}
    @for_const (j from i+1 to l) {
      c:u1 = vi > get{j}
      s{i} += c
      if (j < l-1) s{j} += ~c
    }
    if (s{i} == k) return{tupsel{i, inds}}
  }
  tupsel{l-1, inds}
}
fn locate_median_3{T,U}(src:*T, i0:U, i1:U, i2:U) : U = {
  locate_median{src, tup{i0,i1,i2}}
}
fn locate_median_5{T,U}(src:*T, i0:U, i1:U, i2:U, i3:U, i4:U) : U = {
  locate_median{src, tup{i0,i1,i2,i3,i4}}
}
def median_from{medfn}{array:pT, U} = {
  def fun = medfn{eltype{pT},U}
  {...inds} => fun(array, ...inds)
}
def median3_from = median_from{locate_median_3}
def median5_from = median_from{locate_median_5}

} # end local

def locate_3_median{array:pT, n:U} = {
  median3_from{array,U}{0,n/2,n-1}
}

def locate_3of3_pseudomedian{array:pT, n:U} = {
  q1 := n / 4
  q2 := n / 2
  q3 := n - q1
  def med = median3_from{array, U}
  med{
    med{q1-1, q2-1, q3  },  # 136
    med{ 0  , q2  , q3+1},  # 048
    med{q1  , q2+1, n -1}   # 257
  }
}

def locate_5of3_pseudomedian{array:pT, n:U} = {
  def xorshift16 = make_split_xorshift{tup{7,9,8}, n, 63}
  div := n / 16
  def med = median3_from{array, U}
  def get3{f} = med{...xorshift16{clone{f * div}, div}}
  median5_from{array,U}{...each{get3, tup{0,3,7,10,13}}}
}
