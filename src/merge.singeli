# Merge sorting

# Parity merge: branchless
# Main data movement
def parity_pos{dn, left, right, dst, i} = {
  l := left->0; r := right->i
  c := l <={dn} r
  if (c) r=l; dst <-{i} r
  right -= c
  left  += c
}
def parity_neg{dn, left, right, dst, i} = {
  l := left->(-i); r := right->0
  c := l <={dn} r
  if (c) l=r; dst <-{-i} l
  right -= c
  left  += c
}

# Merge halves of length-n array with constant n (4 and 8 used)
def parity_merge_const{dn, n, dst, src} = {
  def h = n / 2
  left := src; right := src + h; dstc := dst
  @for_const (i to h) parity_pos{dn, left, right, dstc, i}

  left = src + (h-1); right = src + (n-1); dstc = dst + (n-1)
  @for_const (i to h) parity_neg{dn, left, right, dstc, i}
}

# Branchless merge, combining lengths left and n-left from src to dst
# Not in-place: dst can't overlap src
# With guard==0, must have left*2 == n
# With guard==1,           left == n/2 (n can be odd)
# With guard==2, any lengths handled
def parity_merge_any{dn, T} = parity_merge{dn, T, 2}
fn parity_merge{dn, T, guard}(dst:*+T, src:*+T, left:U, n:U) : void = {
  parity_merge{dn, guard, dst, src, left, n}
}
def parity_merge_fn{dn, guard, dst, src, left, n} = {
  parity_merge{dn, eachrec{scaltype,dst}, guard}(dst, src, left, n)
}
def parity_merge{dn, guard, dst, src, left:U, n:U} = {
  def handle_any = guard >= 2
  def handle_odd = guard == 1

  right := n - left
  lpos := src     ; rpos := src + left  ; dpos := dst
  lneg := rpos - 1; rneg := lneg + right; dneg := dst + n - 1

  def done = makelabel{}
  half := if (handle_any) n/2 else left
  if (handle_any) {
    def cut_sides{{short,shneg,shpos}, {long,loneg,lopos}, cmp} = {
      ov := long - short
      # This is faster, but also needed for correctness of the
      # following parity merge!
      if (ov > short) {
        unbalanced_merge{shpos,short, lopos,long, dpos,n, cmp}
        goto{done}
      }
      # If there are ov "outside" elements on either side of the long
      # side, move them to get a balanced merge
      # If not, there are long-ov=short "inside" elements that will
      # merge before the last one on the short side, so it's safe to
      # perform short+short>half merges in that direction: only the
      # last can finish the short side
      def setneg{} = { loneg-=ov; dneg-=ov; set{dneg+1, loneg+1, ov} }
      def setpos{} = { set{dpos, lopos, ov}; lopos+=ov; dpos+=ov }
      if      (RARE{ cmp{* >shneg, >lopos->short   }}) setneg{}
      else if (RARE{~cmp{* >shpos, >loneg->(-short)}}) setpos{}
      else goto{nocut}
      half = short
    }
    def nocut = makelabel{}
    def ldata = tup{left ,lneg,lpos}
    def rdata = tup{right,rneg,rpos}
    if      (left  < half) cut_sides{ldata, rdata, <={dn}}
    else if (right < half) cut_sides{rdata, ldata, < {dn}}
    n = 2*half
    setlabel{nocut}
  }

  @for_unroll{2} (i to half) {
    parity_pos{dn, lpos, rpos, dpos, i}
    parity_neg{dn, lneg, rneg, dneg, i}
  }
  if (handle_odd and n%2) {
    l := lpos->0; r := rpos->half
    if (lpos > lneg-half) l = r
    dpos <-{half} l
  }
  setlabel{done}
}

def unbalanced_merge{shp, short, lop, long, dst, n, lt} = {
  # Step size on the long side
  def K = 8
  # Main loop must stop after placing element short-1 or long-K
  i:u64 = 0; j:u64 = 0; k:u64 = 0
  while (j+K<=long and i<short) {
    # Merge up to 1 element from the short side and K from long
    u := shp->i # Next short value to place
    c:u64 = 0   # Number of elements u passes--its index if <K
    @for_const (v in lop+j, d in dst+k over K) {
      c += ~lt{u,v}
      d = v
    }
    k += c; j += c
    dst <-{k} u
    a := c<K; i += a; k += a
  }
  # Finish up with a branchy backwards loop
  if (i == 0) {
    u := shp->i
    while (lt{u, lop->j}) { dst<-{k}lop->j; ++j; ++k }
    dst <-{k} u; ++i; ++k
  }
  i = short-1; j = long-1
  @for_backwards (d in dst from k to n) {
    u := shp->i; v := lop->j
    if (not lt{u,v}) { d = u; --i }
    else             { d = v; --j }
  }
}

# Merge arrays of length l and n-l starting at a, using buffer aux
# Can be done without moving both sides, but this way's easy
def merge_pair{dn, x, left:U, n:U, aux} = {
  set{aux, x, n}
  parity_merge_fn{dn, 2, x, aux, left, n}
}

# Merge array x of size n, if units of length block are pre-sorted
def merge_from{dn, x, n:U, aux, block} = {
  src:=x; dst:=aux
  w:U = block; while (w < n) {
    ww:=2*w
    i:U=0; while (i < n-w) {
      l := n-i; if (l>ww) l=ww
      parity_merge_fn{dn, 2, dst+i, src+i, w, l}
      i += ww
    }
    if (i < n) set{dst+i, src+i, n-i}
    src <~> dst
    w = ww
  }
  if (src != x) set{x, src, n}
}

# A bottom-down fast but not very adaptive merge sort
# Requires dst != aux; src may be dst or aux
fn pisort{dn, T}(dst:*+T, src:*+T, n:U, aux:*T) : void = {
  pisort{dn, call{pisort{dn,T}, ...}, dst, src, n, aux}
}
def pisort{dn, recur, dst, src, n:U, aux} = {
  if (n < 32) {
    sort_lt32{dn, dst, src, n}
    return{}
  }

  h1 := n / 2; h2 := n - h1

  recur{aux,      src,      h1, dst}
  recur{aux + h1, src + h1, h2, dst + h1}

  if (aux->(h1-1) <={dn} aux->h1) {
    eachrec{set{., ., n}, dst, aux}
  } else {
    parity_merge_fn{dn, 1, dst, aux, h1, n}
  }
}

# Allow index part of src to be just a base index
fn pisort{dn, T, I}(dst:tup{*T,*I}, src:tup{*T,I}, n:U, aux:tup{*T,*I}) : void = {
  pisort{dn, call{pisort{dn,T,I}, ...}, dst, src, n, aux}
}
fn pigrade{dn, T, I}(dst:*I, src:*T, n:U, aux:*void) : void = {
  ai := *I~~aux
  dv := *T~~(ai + n)
  av := dv + n
  pisort{dn, T, I}(tup{dv, dst}, tup{src, 0}, n, tup{av, ai})
}
