# LSD Radix sort (includes bucket sort as the 1-step case)
# Sorts the array according to the least significant byte, then the
# next higher, and so on.
# It has the best "generic" performance of any algorithm here, but has
# no adaptivity and in fact slows down on some fairly common patterns
# due to cache associativity. So while the implementation here is
# general, only the 1- and 2-byte forms are used for hybrid sorting.

local {

# Fix the radix at 1 byte because other widths take too much computation
def radix_bits = 8
def count_len  = 1<<radix_bits

# Number of steps required
def getsteps{x} = width{scaltype{x}} / radix_bits

# Apply fn to the last component of the list if T is signed
def where_signed{T, fn, list} = {
  if (not issigned{T}) list
  else merge{slice{list, 0, -1}, tup{fn{tupsel{-1, list}}}}
}

# Given a tuple, get corresponding key generators: bytes starting from
# the bottom
def keyfns{len, T} = {
  each{
    {sh, K} => { {v} => K<~(v>>sh) },
    range{len} * radix_bits,                # Shifts
    where_signed{T, {_}=>i8, copy{len, u8}} # Types
  }
}

# Sort the n values in x with a number of radix passes equal to steps
# Store counts in count, which must hold steps*count_len counts
# The result for step i is stored at tupsel{i,dsts}
def radix_main{src, n:U, dsts, count:pC} = {
  def T = eltype{type{src}}
  def steps = tuplen{dsts}
  # Tuple of zeroed count arrays, and offset for signed ints
  def counts = init_counts{count, steps}
  def counts_off = where_signed{T, {c}=>c+128, counts}
  # Count frequency of all bytes simultaneously
  def keys = keyfns{steps, T}
  radix_counts{single{src}, n, counts_off + 1, keys}
  # Exclusive sum of each count array (interleaved for speed)
  slice{counts, 1} <- 0
  prefix_sum_excl{counts, count_len, issigned{scaltype{src}}}
  # And do the radix sorting through the successive dsts
  def srcs = shiftright{tup{src}, dsts}
  each{radix_move{n}, srcs, dsts, counts_off, keys}
}

# Zero and split into num arrays with count_len values each
def init_counts{space:pT, num} = {
  set{space, 0, num*count_len}
  scan{+, merge{space, copy{num-1, count_len}}}
}

# Perform all counts in a single pass
def radix_counts{x, n, counts, keys} = {
  @for (x over n) {
    def incr{c, k} = incrp{c + k{x}}
    each{incr, counts, keys}
  }
}

# One step of radix sorting
def radix_move{n}{src, dst, count, key} = {
  @for (src over n) {
    def k = key{single{src}}
    c := count->k
    dst <-{c} src
    count <-{k} c+1
  }
}

} # end local

# Swap back and forth with aux, ending with the elements in x again
def radix_inplace{x:pT, n:U, aux:pT, count:pC} = {
  def steps = getsteps{x}
  radix_main{x, n, cycle{steps,tup{aux,x}}, count}
  if (steps % 2) set{x, aux, n}
}

def radix_grade_inplace{x:pT, xa:pT, g:pI, ga:pI, n:U, count:pC} = {
  def steps = getsteps{x}
  def c{...p, s} = cycle{steps, p}
  def dsts = flip{tup{
    shiftleft{c{x,xa}, 'sink'}, # Start at xa; ignore last
    reverse  {c{g,ga}}          # End at g
  }}
  radix_main{tup{x,scaltype{pI}~~0}, n, dsts, count}
}

# Radix sorting works even for a count one larger than the type maximum:
# the count array can overflow, but after taking an exclusive sum it
# only affects portions after the last element (that is, target indices
# can't overflow)
def radix_fits{n, T & isint{T} & ~issigned{T}} = n <= 1<<width{T}

# Radix sort on arbitrary types
def radix{x:pT, n:U, aux0} = {
  def T = eltype{pT}; def aux = *T~~aux0
  count := aux+n
  def rad{C} = radix_inplace{x, n, aux, *C~~count}
  index_options{rad, n, radix_fits, tup{u8, u32}}
}

# Sort 32-bit data with a 16-bit range
# In place except the counts in aux
radpack32(dst:*u32, src:*u32, n:u32, aux:*void, min:u32) : void = {
  x16 := *u16 ~~ dst
  @for (x16, src over n) x16 = u16<~(src - min)
  def rad{C} = radix_inplace{x16, n, x16 + n, *C~~aux}
  index_options{rad, n, radix_fits, tup{u8, u32}}
  @for_backwards (x16, dst over n) dst = min + u32^~x16
}
