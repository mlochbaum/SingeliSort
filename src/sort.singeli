# Main file that defines the exported sorting algorithms

include './base'
include './common'
include './ins'
include './merge'
include './count'
include './radix'
include './rh'
include './small'
include './quicksort'
include './glide'

# For 1-byte inputs, counting sort is usually best
sort8{dn, T}(x:*T, n:U, aux:*void) : void = {
  if (n < 16) {
    sort_lt32{dn, x, n, 16}
  } else if (radix_fits{dn}{n,u8}) {
    radix_inplace{dn, x, n, *T~~aux, *u8~~(aux+n)}
  } else {
    count_sort{dn, x, n, aux}
  }
}

# For 2-byte inputs, use insertion, radix, or counting sort
sort16{dn, T}(x:*T, n:U, aux:*void) : void = {
  if (n < 24) {
    sort_lt32{dn, x, n}
  } else if (n < 1<<15) {
    radix{dn, x, n, aux}
  } else {
    count_sort{dn, x, n, aux}
  }
}

# Reasonable for both 1-byte and 2-byte inputs
grade8_16{dn, T,I}(x:*T, g:*I, n:U, aux:*void) : void = {
  if (n < 16) {
    sort_lt32{dn, tup{x,g}, tup{x,I~~0}, n, 16}
  } else {
    # Bucket sort; second copies of x and g are unused swap space,
    # as final x isn't needed and initial g is implicit
    radix_grade_inplace{dn, x, x, g, g, n, *U~~aux}
  }
}

local def up = 0
local def down = 1

'sort8'  = sort8 {up, i8}
'sort16' = sort16{up, i16}

'grade8_64'  = grade8_16{up, i8 , u64}
'grade16_64' = grade8_16{up, i16, u64}

'rhsort32' = rh_sort{up, i32, findrange}

'sort32' = flux_sort{up, i32}
'sort_f64' = flux_sort{up, f64}
