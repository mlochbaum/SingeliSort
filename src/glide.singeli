# Merging methods
# Merging 4 segments at a time is most efficient, but 3 is used for
# unbalanced natural runs, and 2 at the end
# Should probably implement versions where the left or right half is
# already in place, to avoid the set{} calls below
def merge_into{dn, dst:pT, src:pT, left:U, n:U} = {
  parity_merge_any{dn, eltype{pT}}(dst, src, left, n)
}
# Merge of 4
def quad_merge{dn, x:pT, a, b, c, d, aux:pT} = {
  l := a + b
  r := c + d
  merge_into{dn, aux,   x,   a, l}    # Left half
  merge_into{dn, aux+l, x+l, c, r}    # Right half
  merge_into{dn, x,     aux, l, l+r}  # Combine
}
# Merge of 3, as a function since it's used twice
triple_merge{dn, T}(x:*T, l:U, m:U, r:U, aux:*T) : void = {
  if (l < r) {
    h := l + m
    merge_into{dn, aux, x, l, h}      # Left
    set{aux+h, x+h, r}                # Right
    merge_into{dn, x, aux, h, h+r}    # Combine
  } else {
    h := m + r
    set{aux, x, l}                    # Left
    merge_into{dn, aux+l, x+l, m, h}  # Right
    merge_into{dn, x, aux, l, l+h}    # Combine
  }
}

# Return a generator that gets depth
def powersort_init{ns} = {
  n := u64^~ns
  scale := (n + ((1<<62) - 1)) / n
  def merge_tree_depth{mid, nl, nr} = {
    mid2 := 2 * (u64^~mid)
    u64^~leading_zeros{(scale * (mid2 - u64^~nl)) ^ (scale * (mid2 + u64^~nr))}
  }
}

glide_sort{dn, T, min_run, sort}(x:*T, n:U, aux:*void, aux_bytes:U) : void = {

  def base_sort{x, n} = sort{x, n, aux, *u8~~stack - *u8~~aux}
  def merge_2{x, l, r}       = merge_pair{dn, x, l, l+r, *T~~aux}
  def merge_3{x, l, m, r}    = triple_merge{dn, T}(x, l, m, r, *T~~aux)
  def merge_4{x, a, b, c, d} = quad_merge{dn, x, a, b, c, d, *T~~aux}

  # A logical run consists of a length (e.g. nl) and sortedness (sl)
  # The starting position is maintained separately
  # Sortedness indicates
  #   0 if unsorted
  #   mid for two sorted sequences
  #   ~0 if sorted (length is also viable but this is easier)
  def SORTED = (1 << width{U}) - 1

  # "Run" of length at most r starting at x
  # Modify r to give the length of the run, and return its sortedness
  # Always searches until a natural run of length >=min_run is found
  # This coalesces unsorted runs, never returning two in a row
  saved_run:U = 0
  def new_run{x, r:U} = {
    s:U = 0
    if (saved_run > 0) {
      r = saved_run; s = SORTED
      saved_run = 0
    } else {
      i := -(U~~min_run)     # Run start
      l    := undefined{U}   # Run length
      desc := undefined{u1}  # Run is descending
      def no_run = makelabel{}
      do {
        i += min_run
        if (r-i < min_run) goto{no_run}
        tup{desc,l} = find_run{dn, x+i, r}
      } while (l < min_run)
      # Should trace beginning of run here too
      if (desc) reverse{x+i, l}
      if (i == 0) {
        r = l; s = SORTED
      } else {
        saved_run = l; r = i
      }
      setlabel{no_run}
    }
    s
  }

  def sort_run{x, n, s} = {
    if      (s == 0) base_sort{x, n}
    else if (s < n)  merge_2{x, s, n-s}
  }

  # Modify xp, nr/sr to merge in nl/sl on the left
  def logical_merge{xp, nl, sl, nr, sr} = {
    xr := xp
    xp -= nl  # Point to new run start
    if ((sl | sr) == 0) { # Both unsorted (TODO check aux_bytes)
      sr = 0
    } else {
      s_min := sl; if (sr < s_min) s_min = sr
      if (s_min == 0) { # One unsorted
        # Sort the unsorted half if it's under two thirds of total size
        if (sr == 0 and nl > nr/2) { base_sort{xr, nr}; sr = SORTED; s_min = sl }
        if (sl == 0 and nr > nl/2) { base_sort{xp, nl}; sl = SORTED; s_min = sr }
      }
      if (s_min == SORTED) { # Both sorted, now split-sorted
        sr = nl
      } else if (s_min > 0) {
        if      (sr == SORTED) merge_3{xp, sl, nl-sl, nr}
        else if (sl == SORTED) merge_3{xp, nl,        sr, nr-sr}
        else                   merge_4{xp, sl, nl-sl, sr, nr-sr}
        sr = SORTED
      }
    }
    nr += nl
  }

  def merge_depth = powersort_init{n}

  # The merge stack has a frame for each defined run
  stack_top := *U~~(*u8~~aux + aux_bytes)
  stack := stack_top
  def Num = 0; def Sort = 1; def Depth = 2; def Frame = 3
  def has_stack{} = stack < stack_top
  def merge_p{} = {
    logical_merge{xp, stack->Num, clone{stack->Sort}, np, sp}
    stack += Frame
  }

  xp := x
  np := n; sp := new_run{x, np}

  xi := x + np; end := x + n
  while (xi < end) {
    # New run: now only used to determine if previous should be merged
    # Next round when it's previous it may be merged
    nn := end - xi; sn := new_run{xi, nn}
    target_depth := merge_depth{xi - x, np, nn}
    xi += nn

    # Merge previous run with the ones that want to be deeper than it
    while (has_stack{} and stack->Depth >= target_depth) merge_p{}

    # Push to stack; shift new to prev
    stack -= Frame
    stack <-{Num} np; stack <-{Sort} sp; stack <-{Depth} target_depth
    xp += np
    np = nn; sp = sn
  }
  while (has_stack{}) merge_p{}
  sort_run{x, np, sp}
}
