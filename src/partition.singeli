# Partition algorithms for quicksort

# Stable partitioning with external memory
# Place values v into dst_false or dst_true according to cmp{v, piv}
# Return the number of true comparisons, or length of dst_true
def flux_partition{src:*T, cmp, piv:T, dst_true:*T, dst_false:*T, n:U} = {
  # Number of true comparisons, and index into dst_true
  l:U = 0
  dst_f := dst_false
  @for_unroll{8} (src over n) {
    c := cmp{src, piv}
    # Write to both destinations: one will be overwritten
    dst_true <-{ l} src
    dst_f    <-{-l} src; ++dst_f
    l += c
  }
  l
}

# Unstable in-place partitioning
# Fulcrum partition works from the outside in, alternating sides as
# necessary to maintain a small gap both on the left and the right.
# It's faster than fluxsort partitioning for large arrays. I believe
# this is because there are two active regions
#   src_left/dst_left, src_right/dst_right
# versus the three in flux_partition
#   src, dst_true, dst_false
# leading to less waiting for the cache
def fulcrum_partition{x:*T, cmp, piv:T, aux:*T, n:U} = {
  # Partition bl elements at a time in the main loop
  def bl = 16
  dst_left  := x;      src_left  := dst_left  + bl
  dst_right := x + n;  src_right := dst_right - bl

  # Create the initial gap between src and dst
  set{aux,      dst_left,  bl}
  set{aux + bl, src_right, bl}

  # Branchless move, as in flux_partition except left and right parts
  # move in opposite directions
  # The shared index l allows us to not increment dst_left,
  # and unconditionally decrement dst_right
  l:U = 0  # Number of values placed on the left so far
  def put{ptr} = {
    v := *ptr
    c := cmp{v, piv}
    dst_left  <-{l} v; --dst_right
    dst_right <-{l} v
    l += c
  }
  # Perform num moves at once, where num <= bl at every call
  # Since the total gap is 2*bl, one side or the other must have room
  # That's the side we don't partition from!
  def part{for, num} = {
    diff := src_left - dst_left - l  # Gap on left side
    if (diff < bl) { @for (num) { put{src_left};  ++src_left  } }
    else           { @for (num) { --src_right; put{src_right} } }
  }

  @for (n / bl - 2) part{for_const, bl} # Main loop, unrolled
  part{for, n % bl}                     # Finish up
  @for (2*bl) { put{aux}; ++aux }       # Partition cleared values
  l
}
