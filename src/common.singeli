# Utilities likely to be useful for multiple sorting algorithms

def fill{dst, len, val} = {
  @for (dst over i to len) dst = val
}

def filter_neq{dst, src, len, v} = {
  d:=dst; l:=len
  s1:=src-1; while (s1->l == v) --l
  @for_unroll{8} (src over i to l) {
    d <- src; d += v != src  # Branchless update
  }
  d
}

def findrange{arr, len} = {
  minv:=arr->0; maxv:=minv;
  @for (arr over i from 1 to len) {
    if (arr<minv) minv=arr; if (arr>maxv) maxv=arr;
  }
  tup{minv,maxv}
}
def readrange{arr, len} = tup{arr->(-1), arr->len}

def dist{U,a:T,b:T} = U ^~ primtype{'u',width{T}} ~~ (b-a)

def prefix_sum{x, len} = {
  sum:eltype{type{x}} = 0
  @for_unroll{4} (x over i from 0 to len) {
    sum += x
    x = sum
  }
}
