# Dropsort! Don't like a value? Kick it out!

# Drapesort is inspired by drop-merge sort, which cleans up after this
# crazy strategy by then sorting the dropped values, and merging them
# back in. By keeping two drop-lists instead of one, it becomes a stable
# algorithm, and also makes it so the drop-lists maintain and even
# improve order in the original data.

# Each time it finds an inversion, it either drops incoming values to
# the too-low list or previously accepted values to the too-high list.

def drape_sort{dn, sort}{x:pT, n:U, aux:pT} = {
  def T = eltype{pT}

  lows:U = 0          # Number of low values dropped
  highs:U = n         # n - high values dropped (written backwards)
  i:U = 1             # Index to read
  keep:U = 0          # Index of last kept value (not one past!)
  while (i < n) {
    v := x->i         # Read next value
    u := x->keep      # Latest kept value
    if (u <={dn} v) { # In order?
      ++i; ++keep; x <-{keep} v
    } else {
      # Drop on left or right?
      # We'll choose the side that lets us drop the fewest
      j:U = 1
      vp := v
      def done = makelabel{}
      while (1) {
        vj := undefined{T}
        if (j == n-i or u <={dn} (vj = x->(i+j)) or vp >{dn} vj) { # Drop right
          @for (j) { aux <-{lows} x->i; ++i; ++lows }
          goto{done}
        }
        if (j > keep or x->(keep-j) <={dn} v) { # Drop left
          d := x + (keep-j+1) # Drop from here and replace with x+i
          @for (d over j) { --highs; aux <-{highs} d; d = x->i; ++i }
          goto{done}
        }
        vp = vj
        ++j
      }
      setlabel{done}
    }
  }

  # Sort values and merge back into x
  def merge_back{old_end, new_end, drops, drop_len, rev, cmp} = {
    # For stability, reverse and sort instead of sorting down
    if (rev) reverse{drops, drop_len}
    # Values past j are no longer needed, so use them as aux space
    sort{drops, drop_len, x + old_end}

    # Now merge
    j := old_end; i := new_end
    # Guarding index j below takes time, so stop before it's needed
    stop:U = 0
    while (stop<drop_len and cmp{drops->stop, x->0}) ++stop
    # Main loop
    @for_backwards (d in drops from stop to drop_len) {
      v:=undefined{T}; jn:=undefined{U}
      while (cmp{d, (v = x->(jn=j-1))}) { --i; x <-{i} v; j=jn }
      --i; x <-{i} d
    }
    # Take care of the part that couldn't be guarded
    if (stop > 0) {
      while (j>0) { --j; --i; x <-{i} x->j }
      set{x, drops, stop}
    }
  }

  j := keep + 1   # Number of kept values
  jh := n - lows  # Plus high values once those are merged
  if (j < jh)   merge_back{j, jh, aux+highs, n-highs, 1, <={dn}}
  if (lows > 0) merge_back{jh, n, aux,       lows,    0, < {dn}}
}
